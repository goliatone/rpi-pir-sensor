#!/usr/bin/env node
'use strict';

var config = require('../config');
var sensor = require('../sensor');
var logger = require('../logger');
var reporter = require('../reporter');
var server = require('../server').createServer();
var agent = require('../agent');
var occupancy = require('../occupancy');
var realtime = require('../realtime');
//TODO: Refactor occupancy to use dispatcher
// var dispatcher = require('../lib/dispatcher'); d

var extend = require('gextend');

/*
 * Initialize logger
 */
config.logger = logger.init(config.logger, config);

/*
 * Initialize menagerie agent.
 */
agent.init(config.agent, config);

/*
 * Initialize reporter.
 * Reporter sends sensor data to
 * different endpoints. In this
 * case, InlfuxDB.
 */
reporter.init(config.reporter, config);


console.log('config');
console.log(JSON.stringify(config, null, 4));

/*
 * We run a small server instance that
 * provides a GUI.
 *
 * TODO: Ideally we would like to have this
 * as a separate process (docker image?)
 */
server.on('server.post-routes', function(){
    console.log('server post routes handler, registering routes');
    sensor.registerRoutes(server);
});

server.start().on('server.ready', function(){
    /*
     * Sensor uses app to publish events.
     * TODO: replace server here with dispatcher
     */
    sensor.init(server, config.sensor);
});

/*
 * We register an event listener for sensor
 * events.
 * TODO: replace server here with dispatcher
 */
server.on('sensor.event', function(event){
    // console.warn('sensor.event', event);

    //We could just pass through the event?
    var payload = getPayload({
            event: event.type,
            value: event.value,
            time: event.time || Date.now()
        }, {
            id: event.id
        }, config.reporter.tags);

    reporter.buffer(payload);
});

/*
 * This is kinda ugly. We should have a better way to
 * do this. Basically we want to ensure that the events
 * we send from amqp have the same format as the events
 * sent by sensor.
 * We should have a service that both occupancy and sensor
 * use. For now, this will do :)
 */
occupancy.buildChangeEventPayload = sensor.getPayloadFromValue;

occupancy.init(config.occupancy, config);

occupancy.on(config.occupancy.eventType, function(value){
    console.log('handler on change', value);
});

occupancy.on('occupancy.status.request', function(){
    var payload = sensor.getPayloadFromValue(occupancy.status);
    if(payload.value !== 1) payload.value = 0;
    console.log('occupancy.status.request', payload);
    occupancy.emit('occupancy.status.update', payload);
});

/*
 * Register event listener for sensor events
 * and feed the occupancy driver
 */
server.on('sensor.event', occupancy.update);

/*
 * Initialize our realtime component.
 * It add an event listener
 */
realtime.init(occupancy, config.realtime);

function getPayload(values, tags, defaults){
    var out = extend({}, defaults, tags);
    return [values, out];
}
