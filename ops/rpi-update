#!/usr/bin/env node

'use strict';

var program = require('commander');
var pkg = require('../package.json');
var join = require('path').join;
var resolve = require('path').resolve;
var template = require('./utils/template');

var exec = require('child_process').execSync;

//we expect two CLI arguments:
//a) environment type
//b) instance name
program
    .version(pkg.version)
    .option('-e, --environment <environment>', 'Environment to pull variables from')
    .option('-h, --hostname <hostname>', 'Instance hostname name')
    .option('-C, --context-path <context-path>', 'We can pass either a path to a json file or a path to a directory with json files named after the hostname.', false)
    .option('-d, --dry-run', 'Just display cmds but do not run them')
    .option('-i, --ip, <ip>', 'IP of RPi instance')
    .parse(process.argv);

if(!program.environment || !program.hostname){
    console.log('\n  Missing required arguments.');
    program.outputHelp();
    process.exit(0);
}


var contextpath = false;

if(program.contextPath){
    contextpath = resolve(program.contextPath);
    if(contextpath.indexOf('.json') === -1) contextpath = join(contextpath, program.hostname + '.json');
}

var context = {
    filepath: './',
    filename: '.' + program.hostname + '-env',
    scripts: __dirname,
    address: getHostname(program.hostname, program.ip),
    hostname: program.hostname,
    environment: program.environment,
    contextpath: contextpath,
    envfile: join( __dirname, 'env-files', '.env-' + program.hostname)
};

//console.log(context)

var tpls = [
    //create env file based on environment and instance
    'NODE_RPI_ID={{hostname}} envset {{environment}} -- slv -c={{contextpath}} {{scripts}}/templates/env.tpl > {{envfile}}',
    //copy env file to destination rpi
    'time scp {{envfile}} root@{{address}}:/root/.env',
    //update remote instance
    'time cat {{scripts}}/update-instance | ssh root@{{address}} /bin/bash'
];

var cmds = [];
tpls.map(function(tpl){
    cmds.push(template(tpl, context));
});


//TODO: We need to capture output in a sane way
cmds.map(function(cmd){
    if(program.dryRun) return console.log(cmd);
    var out = exec(cmd, {stdio: [0, 1, 2]});
});


function getHostname(hostname, ip){
    if(ip) return ip;
    return hostname + '.local';
}