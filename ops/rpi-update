#!/usr/bin/env node

'use strict';

var program = require('commander');
var pkg = require('../package.json');
var template = require('./utils/template');

var exec = require('child_process').execSync;

//we expect two CLI arguments:
//a) environment type
//b) instance name
program
    .version(pkg.version)
    .option('-e, --environment <environment>', 'Environment to pull variables from')
    .option('-h, --hostname <hostname>', 'Instance hostname name')
    .parse(process.argv);

if(!program.environment || !program.hostname){
    console.log('\n  Missing required arguments.');
    program.outputHelp();
    process.exit(0);
}

var context = {
    filepath: './',
    filename: '.' + program.hostname + '-env',
    scripts: __dirname,
    hostname: program.hostname,
    environment: program.environment,
    envfile: require('path').join( __dirname, 'env-files', '.env-' + program.hostname)
};

//console.log(context)

var tpls = [
    //create env file based on environment and instance
    'NODE_RPI_ID={{hostname}} envset {{environment}} -- slv {{scripts}}/templates/env.tpl > {{envfile}}',
    //copy env file to destination rpi
    'time scp {{envfile}} root@{{hostname}}.local:/root/.env',
    //update remote instance
    'time cat {{scripts}}/update-instance | ssh root@{{hostname}}.local /bin/bash'
];

var cmds = [];
tpls.map(function(tpl){
    cmds.push(template(tpl, context));
});


//TODO: We need to capture output in a sane way
cmds.map(function(cmd){
    var out = exec(cmd, {stdio: [0, 1, 2]});
});

